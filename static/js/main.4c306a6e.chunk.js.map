{"version":3,"sources":["assets/twitter-logo.svg","components/Footer.js","assets/opensea.png","utils/interact.js","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","Footer","className","style","display","justifyContent","alignItems","alt","src","twitterLogo","href","target","rel","CONTRACT_ADDRESS","checkIfWalletIsConnected","a","window","ethereum","request","method","accounts","length","account","setupEventListener","chainId","console","log","alert","message","connectWallet","askContractToMintNft","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","MyEpicNFT","abi","makeAnEpicNFT","nftTxn","wait","hash","on","from","tokenId","toNumber","error","askContractForMintCount","getTotalNFTsMinted","countValue","App","useState","currentAccount","setCurrentAccount","nftsMinted","setNftsMinted","loading","setLoading","useEffect","minted","addWalletListener","location","reload","_chainId","connectWalletPressed","mintButtonPressed","TopBar","onClick","open","marginTop","marginBottom","openseaLogo","images","how","time","size","background","paddingLeft","flex","flexDirection","disabled","marginRight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c306a6e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.ab177c79.svg\";","import React from \"react\";\r\nimport twitterLogo from \"../assets/twitter-logo.svg\";\r\nimport \"../styles/Footer.css\";\r\n\r\nconst TWITTER_HANDLE = \"TuturuTech\";\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer-container backdrop\">\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n        <a\r\n          className=\"footer-text\"\r\n          href={TWITTER_LINK}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >{`built by @${TWITTER_HANDLE}`}</a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export default __webpack_public_path__ + \"static/media/opensea.5b5dcb52.png\";","import { ethers } from \"ethers\";\r\nimport MyEpicNFT from \"./MyEpicNFT.json\";\r\nconst CONTRACT_ADDRESS = \"0x7928528826bdd1C8De615feB08e852115B12528b\";\r\n\r\nexport const checkIfWalletIsConnected = async () => {\r\n  const { ethereum } = window;\r\n\r\n  if (ethereum) {\r\n    try {\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n\r\n      if (accounts.length > 0) {\r\n        const account = accounts[0];\r\n        setupEventListener();\r\n        let chainId = await ethereum.request({ method: \"eth_chainId\" });\r\n        console.log(\"Connected to chain \" + chainId);\r\n\r\n        // String, hex code of the chainId of the Rinkebey test network\r\n        const rinkebyChainId = \"0x4\";\r\n        if (chainId !== rinkebyChainId) {\r\n          alert(\"You are not connected to the Rinkeby Test Network!\");\r\n        }\r\n        return account;\r\n      } else {\r\n        return \"\";\r\n      }\r\n    } catch (error) {\r\n      console.log(error.message);\r\n      return \"\";\r\n    }\r\n  } else {\r\n    console.log(\"Make sure you have metamask!\");\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const connectWallet = async () => {\r\n  try {\r\n    const { ethereum } = window;\r\n\r\n    if (!ethereum) {\r\n      alert(\"Get MetaMask!\");\r\n      return;\r\n    }\r\n\r\n    /*\r\n     * Fancy method to request access to account.\r\n     */\r\n    const accounts = await ethereum.request({\r\n      method: \"eth_requestAccounts\",\r\n    });\r\n\r\n    /*\r\n     * Boom! This should print out public address once we authorize Metamask.\r\n     */\r\n    console.log(\"Connected\", accounts[0]);\r\n\r\n    let chainId = await ethereum.request({ method: \"eth_chainId\" });\r\n    console.log(\"Connected to chain \" + chainId);\r\n\r\n    // String, hex code of the chainId of the Rinkebey test network\r\n    const rinkebyChainId = \"0x4\";\r\n    if (chainId !== rinkebyChainId) {\r\n      alert(\"You are not connected to the Rinkeby Test Network!\");\r\n    }\r\n\r\n    setupEventListener();\r\n    return accounts[0];\r\n  } catch (error) {\r\n    console.log(error);\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const askContractToMintNft = async () => {\r\n  try {\r\n    const { ethereum } = window;\r\n\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const connectedContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        MyEpicNFT.abi,\r\n        signer\r\n      );\r\n\r\n      console.log(\"Going to pop wallet now to pay gas...\");\r\n      let nftTxn = await connectedContract.makeAnEpicNFT();\r\n\r\n      console.log(\"Mining...please wait.\");\r\n      await nftTxn.wait();\r\n\r\n      console.log(\r\n        `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\r\n      );\r\n    } else {\r\n      console.log(\"Ethereum object doesn't exist!\");\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst setupEventListener = () => {\r\n  try {\r\n    const { ethereum } = window;\r\n\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const connectedContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        MyEpicNFT.abi,\r\n        signer\r\n      );\r\n\r\n      connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\r\n        console.log(from, tokenId.toNumber());\r\n        alert(\r\n          `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\r\n        );\r\n      });\r\n    } else {\r\n      console.log(\"Ethereum object doesn't exist!\");\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const askContractForMintCount = async () => {\r\n  try {\r\n    const { ethereum } = window;\r\n\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const connectedContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        MyEpicNFT.abi,\r\n        signer\r\n      );\r\n\r\n      let countValue = await connectedContract.getTotalNFTsMinted();\r\n\r\n      return countValue.toNumber();\r\n    } else {\r\n      console.log(\"Ethereum object doesn't exist!\");\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import \"./styles/App.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Footer from \"./components/Footer\";\r\nimport openseaLogo from \"./assets/opensea.png\";\r\nimport Sky from \"react-sky\";\r\n\r\nimport {\r\n  connectWallet,\r\n  checkIfWalletIsConnected,\r\n  askContractForMintCount,\r\n  askContractToMintNft,\r\n} from \"./utils/interact.js\";\r\n\r\nconst OPENSEA_LINK =\r\n  \"https://testnets.opensea.io/collection/squarenft-2ksgv8quli\";\r\nconst TOTAL_MINT_COUNT = 50;\r\n\r\nconst imagesObject = {\r\n  0: \"\",\r\n  1: \"\",\r\n  2: \"\",\r\n};\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [nftsMinted, setNftsMinted] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(async () => {\r\n    const account = await checkIfWalletIsConnected();\r\n    const minted = await askContractForMintCount();\r\n\r\n    setCurrentAccount(account);\r\n    setNftsMinted(minted);\r\n\r\n    addWalletListener();\r\n  }, []);\r\n\r\n  const addWalletListener = () => {\r\n    const { ethereum } = window;\r\n\r\n    if (ethereum) {\r\n      ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setCurrentAccount(accounts[0]);\r\n        } else {\r\n          setCurrentAccount(\"\");\r\n        }\r\n      });\r\n      ethereum.on(\"disconnect\", () => {\r\n        setCurrentAccount(\"\");\r\n        window.location.reload();\r\n      });\r\n      ethereum.on(\"chainChanged\", (_chainId) => {\r\n        let chainId = _chainId;\r\n        console.log(\"Connected to chain \" + chainId);\r\n\r\n        // String, hex code of the chainId of the Rinkebey test network\r\n        const rinkebyChainId = \"0x4\";\r\n        if (chainId !== rinkebyChainId) {\r\n          alert(\"You are not connected to the Rinkeby Test Network!\");\r\n        } else {\r\n          window.location.reload();\r\n        }\r\n      });\r\n    } else {\r\n      console.log(\"Make sure you have metamask!\");\r\n    }\r\n  };\r\n\r\n  const connectWalletPressed = async () => {\r\n    const account = await connectWallet();\r\n    setCurrentAccount(account);\r\n  };\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      onClick={connectWalletPressed}\r\n      className=\"cta-button connect-wallet-button\"\r\n    >\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  const renderMintUI = () => (\r\n    <div className=\"button-flex\">\r\n      <button\r\n        onClick={mintButtonPressed}\r\n        className=\"cta-button connect-wallet-button\"\r\n        disabled={loading}\r\n      >\r\n        {loading && (\r\n          <i className=\"fa fa-refresh fa-spin\" style={{ marginRight: \"5px\" }} />\r\n        )}\r\n        {loading && <span>Minting your NFT...</span>}\r\n        {!loading && <span>Mint NFT</span>}\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  const mintButtonPressed = async () => {\r\n    setLoading(true);\r\n    await askContractToMintNft();\r\n\r\n    const minted = await askContractForMintCount();\r\n    console.log(\"No. minted\", minted);\r\n    setNftsMinted(minted);\r\n    setLoading(false);\r\n  };\r\n\r\n  const TopBar = () => {\r\n    return (\r\n      <div className=\"top-bar\">\r\n        <button\r\n          onClick={() => {\r\n            window.open(OPENSEA_LINK, \"_blank\");\r\n          }}\r\n          className=\"cta-button opensea-button\"\r\n        >\r\n          <p style={{ marginTop: \"auto\", marginBottom: \"auto\" }}>\r\n            Check collection on\r\n          </p>\r\n          <img alt=\"opensea logo\" className=\"opensea-logo\" src={openseaLogo} />\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /*\r\n   * Added a conditional render! We don't want to show Connect to Wallet if we're already conencted :).\r\n   */\r\n  return (\r\n    <div className=\"App\">\r\n      <TopBar />\r\n      <div className=\"container\">\r\n        <Sky\r\n          images={{\r\n            /* FORMAT AS FOLLOWS */\r\n            0: \"https://storage.opensea.io/files/3e5282cab7426868cd5e63b0cbd89f2b.svg\",\r\n            1: \"https://storage.opensea.io/files/3a08af00b2e6d868a35d43dcb83bab1e.svg\",\r\n            2: \"https://storage.opensea.io/files/fa01d350878cb33d6d15055b1261a25b.svg\",\r\n            3: \"https://storage.opensea.io/files/9c39d71e9ad49857fa2b809749a48a5c.svg\",\r\n            4: \"https://storage.opensea.io/files/671b8f8c249d61a0174cc1345a48bccb.svg\",\r\n          }}\r\n          how={\r\n            50\r\n          } /* Pass the number of images Sky will render chosing randomly */\r\n          time={40} /* time of animation */\r\n          size={\"200px\"} /* size of the rendered images */\r\n          background={\"darkslategray\"} /* color of background */\r\n        />\r\n        <div className=\"backdrop\" style={{ paddingLeft: \"5px\" }}>\r\n          <p className=\"header gradient-text\"> Mint your random NFT!</p>\r\n          <p className=\"sub-text\">\r\n            You can mint a pseudo-random three-word combination NFT right here.\r\n          </p>\r\n        </div>\r\n        <div\r\n          style={{\r\n            flex: 0.5,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          {currentAccount === \"\"\r\n            ? renderNotConnectedContainer()\r\n            : renderMintUI()}\r\n        </div>\r\n\r\n        <div className=\"backdrop\">\r\n          <p className=\"mint-count\">Minted NFTs:</p>\r\n          <p className=\"mint-count\">\r\n            {nftsMinted}/{TOTAL_MINT_COUNT}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}